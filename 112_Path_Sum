/*************************************************************
8.13.22
https://leetcode.com/problems/path-sum/
**************************************************************/


class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null){
            return false;
        }
        
        targetSum -= root.val;
        
        if (root.left == null && root.right == null){
            return targetSum == 0;
        }
        
        return hasPathSum(root.left, targetSum) || hasPathSum(root.right, targetSum);
        
    }
}
/*

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null){
            return false;
        }
        
        Deque<Pair<TreeNode, Integer>> stack = new LinkedList<>();
        stack.addFirst(new Pair<TreeNode, Integer>(root, targetSum));
        
        while (!stack.isEmpty()){
            Pair<TreeNode, Integer> pair = stack.removeFirst();
            TreeNode current = pair.getKey();
            int sum = pair.getValue();
            sum -= current.val;
            if (current.left == null && current.right == null && sum == 0){
                return true;
            }
            
            if (current.right != null){
            stack.addFirst(new Pair<TreeNode, Integer>(current.right, sum));
            }
            
            if (current.left != null){
            stack.addFirst(new Pair<TreeNode, Integer>(current.left, sum));
            }
        }
        
        return false;
        
    }
}
*/