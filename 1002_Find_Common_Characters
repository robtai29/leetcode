/*************************************************************
11.24.24
https://leetcode.com/problems/find-common-characters/
**************************************************************/

class Solution {
    public List<String> commonChars(String[] words) {
        
        Map<Character, Integer> map = new HashMap<>();
        
        for (char ch : words[0].toCharArray()){
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        
        for (int i = 1; i < words.length; i++){
            String word = words[i];
            Map<Character, Integer> tempMap = new HashMap<>();
            
            for (char ch : word.toCharArray()){
                tempMap.put(ch, tempMap.getOrDefault(ch, 0) + 1);
            }
            
            for (Map.Entry<Character, Integer> entry : map.entrySet()){
                int value = Math.min(entry.getValue(), tempMap.getOrDefault(entry.getKey(), 0));
                entry.setValue(value);
            }
            
        }
        
        List<String> res = new ArrayList<>();
        for (Map.Entry<Character, Integer> entry : map.entrySet()){
            int value = entry.getValue();
            for (int i = 0; i < value; i++){
                res.add(String.valueOf(entry.getKey()));
            }
            
        }
        
        return res;
        
    }
}

//11.27.24
/*
class Solution {
    public List<String> commonChars(String[] words) {
        int[] letters = new int[26];
        
        for (char ch : words[0].toCharArray()){
            letters[ch - 'a']++;
        }
        
        for (int i = 1; i < words.length; i++){
            int[] temp = new int[26];
            
            for (char ch : words[i].toCharArray()){
                temp[ch - 'a']++;
            }
            
            intersect(letters, temp);
        }
        
        List<String> list = new ArrayList<>();
        for (int i = 0; i < letters.length; i++){
            for (int j = 0; j < letters[i]; j++){
                list.add(""+ (char)('a' + i));
            }
            
        }
        
        return list;
    }
    
    private void intersect(int[] letters, int[] temp){
        if (letters == null || temp == null){
            return;
        }
        
        if (letters.length != temp.length){
            return;
        }
        
        for (int i = 0; i < letters.length; i++){
            int val = Math.min(letters[i], temp[i]);
            letters[i] = val;
        }
        
    }
}
 */