/*************************************************************
7.30.22
https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/
**************************************************************/

class Solution {
    public boolean checkAlmostEquivalent(String word1, String word2) {
        int[] letters = new int[26];
        
        for (int i = 0; i < word1.length(); i++){
            letters[word1.charAt(i) - 'a']++;
            letters[word2.charAt(i) - 'a']--;
        }
        
        return Arrays.stream(letters).allMatch(num -> Math.abs(num) <=3 );
    }
}

// 12.29.24
/* 
class Solution {
    public boolean checkAlmostEquivalent(String word1, String word2) {
        Map<Character, Integer> map = new HashMap<>();
        for (char ch : word1.toCharArray()){
            map.put(ch, map.getOrDefault(ch, 0)+1);
        }
        for (char ch : word2.toCharArray()){
            map.put(ch, map.getOrDefault(ch, 0)-1);
        }
        
        for (int num: map.values()){
            if (Math.abs(num) > 3){
                return false;
            }
        }
        return true;
    }
}
*/

//  5.31.25
/*
class Solution {
    public boolean checkAlmostEquivalent(String word1, String word2) {
        Map<Character, Integer> map1 = new HashMap<>();
        Map<Character, Integer> map2 = new HashMap<>();

        word1.chars().mapToObj(ch->(char)ch).forEach(ch->map1.put(ch, map1.getOrDefault(ch, 0)+1));
        word2.chars().mapToObj(ch->(char)ch).forEach(ch->map2.put(ch, map2.getOrDefault(ch, 0)+1));

        for (char ch = 'a'; ch <= 'z'; ch++){
            int count1 = map1.getOrDefault(ch, 0);
            int count2 = map2.getOrDefault(ch, 0);
            if (Math.abs(count1-count2) >3){
                return false;
            }
        }
        return true;
    }
}
*/