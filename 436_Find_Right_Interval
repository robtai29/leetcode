/*************************************************************
8.6.22
https://leetcode.com/problems/find-right-interval/
**************************************************************/

class Solution {
    public int[] findRightInterval(int[][] intervals) {
        TreeMap<Integer, Integer> tree = new TreeMap<>();
        
        for (int i = 0; i < intervals.length; i++){
            tree.put(intervals[i][0], i);
        }
        
        int[] res = new int[intervals.length];
        
        for (int i = 0; i < intervals.length; i++){
            Integer lower_bound = tree.ceilingKey(intervals[i][1]);
            res[i] = lower_bound == null ? -1 : tree.get(lower_bound);
        }
        
        return res;
    }
}

/*
class Solution {
    public int[] findRightInterval(int[][] intervals) {
        int size = intervals.length;
        
        int[] arr = new int[size];
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < size; i++){
            arr[i] = intervals[i][0];
            map.put(intervals[i][0], i);
        }
        
        Arrays.sort(arr);
        int[] res = new int[size];
        
        for (int i = 0; i < size; i++){
            int end = intervals[i][1];
            int lower_bound = lowerBound(end, arr);
            if (lower_bound < end){
                res[i] = -1;
            }else{
                res[i] = map.get(lower_bound);
            }
        }
        
        return res;
    }
    
    private int lowerBound(int num, int[] arr){
        int left = 0;
        int right = arr.length -1;
        
        while (left < right){
            int mid = left + (right - left) / 2;
            if (arr[mid] < num){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        
        return arr[left];
    }
}
*/