/*************************************************************
7.25.22
https://leetcode.com/problems/sort-array-by-parity/
**************************************************************/


class Solution {
    public int[] sortArrayByParity(int[] nums) {
        
        for (int i = 0, j = 0; j < nums.length; j++){
            if (nums[j] % 2 == 0){
                int temp = nums[j];
                nums[j] = nums[i];
                nums[i] = temp;
                i++;
            }
        }
        
        return nums;
    }
    
}

// 12.8.24
/*
class Solution {
    public int[] sortArrayByParity(int[] nums) {
        List<Integer> list = Arrays.stream(nums).boxed().collect(Collectors.toList());
        
        //a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.

        Collections.sort(list, new Comparator<Integer>(){
           public int compare(Integer i1, Integer i2){
              if (i1 % 2 == 0){
                  return -1;
              }else if (i2 % 2 == 0){
                  return 1;
              }else{
                  return 0;
              }
           }
        });
        
        return list.stream().mapToInt(num -> num).toArray();
    }
}
 
*/


// 12.8.24
/*
class Solution {
    public int[] sortArrayByParity(int[] nums) {
        return Arrays.stream(nums).boxed().sorted((a, b) -> a % 2 == 0 ? -1 : b % 2 == 0 ? 1 : 0).mapToInt(Integer::valueOf).toArray();
    }
}
 */