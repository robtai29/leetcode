/*************************************************************
8.27.22
https://leetcode.com/problems/relative-sort-array/
**************************************************************/

class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        int[] nums = new int[1001];
        
        for (int num : arr1){
            nums[num]++;
        }
        
        int[] res = new int[arr1.length];
        int index = 0;
        
        for (int num : arr2){
            while (nums[num] > 0){
                res[index] = num;
                index++;
                nums[num]--;
            }
        }
        
        for (int i = 0; i < 1001; i++){
            while (nums[i]-- > 0){
                res[index++] = i;
            }
        }    
        
        return res;
    }
}
// 11.23.24
/*
class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        Map<Integer, Integer> map = new HashMap<>();
        List<Integer> remaining = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        
        for (int num : arr2){
            map.put(num, 0);
        }
        
        for (int num : arr1){
            if (map.containsKey(num)){
                map.put(num, map.get(num) + 1);
            }else{
                remaining.add(num);
            }
        }
        
        Collections.sort(remaining);
        for (int num : arr2){
            for (int i = 0; i < map.get(num); i++){
                list.add(num);
            }
        }
        
        list.addAll(remaining);
        
        return list.stream().mapToInt(Integer::valueOf).toArray();        
    }
}

 */


 // 11.23.24
 /*
  class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        int max = Arrays.stream(arr1).max().orElse(0);
        List<Integer> res = new ArrayList<>();
        int[] arr = new int[max+1];
        
        for (int num : arr1){
            arr[num]++;
        }
        
        for (int num : arr2){
            while(arr[num] > 0){
                res.add(num);
                arr[num]--;
            }
        }
        
        for (int i=0; i< arr.length; i++){
            while (arr[i] > 0){
                 res.add(i);
                 arr[i]--;
            }
        }
        
        return res.stream().mapToInt(Integer::valueOf).toArray();
    }
}
  */


  //11.23.24
  /*
class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < arr2.length; i++){
            map.put(arr2[i], i);
        }
        
        List<Integer> list = Arrays.stream(arr1).boxed().collect(Collectors.toList());
        list.sort(new Comparator<Integer>() {
            public int compare(Integer a, Integer b){
                int rankA = map.containsKey(a) ? map.get(a) : map.size();
                int rankB = map.containsKey(b) ? map.get(b) : map.size();
                return rankA == rankB ? Integer.compare(a, b) : Integer.compare(rankA, rankB);
            }
        });
        
            return list.stream().mapToInt(Integer::valueOf).toArray();

    }
    
}
   */