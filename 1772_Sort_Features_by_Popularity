/*************************************************************
12.24.24
https://leetcode.com/problems/sort-features-by-popularity/
https://www.lintcode.com/problem/3718/
**************************************************************/

public class Solution {
    public String[] sortFeatures(String[] features, String[] responses) {
        Map<String, Integer> map = new HashMap<>();
        for (String feature : features){
            map.put(feature, 0);
        }

        for (String response : responses){
            Set<String> set = new HashSet<>(Arrays.asList(response.split(" ")));
            for (String str : set){
                if (map.containsKey(str)){
                    map.put(str, map.get(str)+1);
                }
            }
        }

        Arrays.sort(features, new Comparator<String>(){
            public int compare(String s1, String s2){
                int rank1 = map.get(s1);
                int rank2 = map.get(s2);

                return Integer.compare(rank2, rank1);
            }
        });

        return features;
    }
}