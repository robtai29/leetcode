/*************************************************************
1.27.25
https://leetcode.com/problems/convert-an-array-into-a-2d-array-with-conditions/
**************************************************************/

class Solution {
    public List<List<Integer>> findMatrix(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums){
            map.put(num, map.getOrDefault(num, 0)+1);
        }

        List<List<Integer>> res = new ArrayList<>();
        while (!map.isEmpty()){
            List<Integer> list = new ArrayList<>();
            Iterator<Map.Entry<Integer, Integer>> it = map.entrySet().iterator();
            while (it.hasNext()){
                Map.Entry<Integer, Integer> entry = it.next();
                int key = entry.getKey();
                int value = entry.getValue();
                list.add(key);
                map.put(key, value-1);
                if (map.get(key) == 0){
                    it.remove();
                }
            }
            res.add(list);
        }
        return res;
    }
}


// 1.27.25
/*
class Solution {
    public List<List<Integer>> findMatrix(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums){
            map.put(num, map.getOrDefault(num, 0)+1);
        }

        List<List<Integer>> res = new ArrayList<>();
        int len = Collections.max(map.values());
        for (int i = 0; i < len; i++){
            res.add(new ArrayList<Integer>());
        }

        for (Map.Entry<Integer, Integer> entry : map.entrySet()){
            int key = entry.getKey();
            int value = entry.getValue();
            for (int i = 0; i < value; i++){
                res.get(i).add(key);
            }
        }
        return res;
    }
}
 */