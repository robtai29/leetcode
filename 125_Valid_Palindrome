
/*************************************************************
7.16.22
https://leetcode.com/problems/valid-palindrome/
**************************************************************/

class Solution {
    public boolean isPalindrome(String s) {
        char[] arr = s.toCharArray();
        
        for (int i = 0, j = arr.length -1; i < j;){
            if (!Character.isLetterOrDigit(arr[i])){
                i++;
            }else if (!Character.isLetterOrDigit(arr[j])){
                j--;
            }else if (Character.toLowerCase(arr[i++]) != Character.toLowerCase(arr[j--])){
                return false;
            }
        }
        return true;
    }
}

/*
class Solution {
    public boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        
        while (left < right){
            while(left < s.length() && !Character.isLetterOrDigit(s.charAt(left))){
                left++;
            }
            while(right >= 0 && !Character.isLetterOrDigit(s.charAt(right))){
                right--;
            }
            
            if (left < right) {
                char ch1 = Character.toLowerCase(s.charAt(left));
                char ch2 = Character.toLowerCase(s.charAt(right));
                
                if (ch1 == ch2){
                    left++;
                    right--;

                }else{
                    return false;
                }
            }
            
            
        }
        return true;
    }
}
*/

// 12.28.24
/*
class Solution {
    public boolean isPalindrome(String s) {
        s = s.trim().replaceAll("[^A-Za-z0-9]", "").replaceAll("\\s+", "").toLowerCase();
        int left = 0, right = s.length()-1;

        while (left < right){
            char leftChar = s.charAt(left);
            char rightChar = s.charAt(right);
            if (leftChar != rightChar){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
*/