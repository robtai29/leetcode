/****\*\*\*\*****\*\*\*\*****\*\*\*\*****\*\*\*****\*\*\*\*****\*\*\*\*****\*\*\*\*****
12.15.24
https://leetcode.com/problems/group-anagrams/
****\*\*\*\*****\*\*\*\*****\*\*\*\*****\*\*\*\*****\*\*\*\*****\*\*\*\*****\*\*\*\*****/

class Solution {
public List<List<Integer>> levelOrder(TreeNode root) {
List<List<Integer>> res = new ArrayList<>();
if (root == null){
return res;
}
Queue<TreeNode> queue = new LinkedList<>();
queue.offer(root);

        while (!queue.isEmpty()){
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                if (node.left != null){
                    queue.offer(node.left);
                }

                if (node.right != null){
                    queue.offer(node.right);
                }

                list.add(node.val);
            }
            res.add(list);
        }
        return res;
    }

}

/\*
class Solution {
public List<List<Integer>> levelOrder(TreeNode root) {
List<List<Integer>> res = new ArrayList<>();
dfs(root, res, 0);
return res;
}

    private void dfs(TreeNode node, List<List<Integer>> res, int level){
        if (node == null){
            return;
        }

        if (res.size() == level){
            res.add(new ArrayList<>());
        }
        List<Integer> list = res.get(level);
        list.add(node.val);

        dfs(node.left, res, level+1);
        dfs(node.right, res, level+1);
    }

}
\*/
