/*
 *  11.30.24
 *  https://leetcode.com/problems/most-frequent-even-element/
 */

class Solution {
    public int mostFrequentEven(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums){
            if (num % 2 == 0){
                map.put(num, map.getOrDefault(num, 0)+1);
            }
        }
        
        List<Integer> res = new ArrayList<>(map.keySet());
        Collections.sort(res, new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                int rankA = map.get(a);
                int rankB = map.get(b);
                if (rankA == rankB){
                    return Integer.compare(a, b);
                }else{
                    return Integer.compare(rankB, rankA);
                }
            }
        });
        
        return res.isEmpty() ? -1 : res.get(0);
    }
}

// 11.30.24
/*
class Solution {
    public int mostFrequentEven(int[] nums) {
        Map < Integer, Integer > map = new HashMap < > ();
        int res = -1, freq = 0, current = -1;

        for (int num: nums) {
            if (num % 2 == 0) {
                map.put(num, map.getOrDefault(num, 0) + 1);
                if (map.get(num) > freq || (map.get(num) == freq && num < res)) {
                    freq = map.get(num);
                    res = num;
                }
            }
        }

        return res;
    }
}
 */