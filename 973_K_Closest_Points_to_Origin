
/*************************************************************
7.9.22
https://leetcode.com/problems/k-closest-points-to-origin/
**************************************************************/

class Solution {
public int[][] kClosest(int[][] points, int k) {
PriorityQueue<int[]> maxheap = new PriorityQueue<>((a, b) ->
((b[0]_b[0] +b[1] _ b[1])) - (a[0]_a[0] +a[1] _ a[1]));

        for (int i = 0; i < points.length; i++){
            maxheap.add(points[i]);

            if (maxheap.size() > k){
                maxheap.remove();
            }
        }

        int[][] res= new int[k][2];

        int count = 0;
        while(!maxheap.isEmpty()){
            res[count++] = maxheap.remove();
        }
            return res;

    }

}

// 1.26.25
/*
class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] arr1, int[] arr2){
                int distance1 = (arr1[0]*arr1[0] + arr1[1]*arr1[1]);
                int distance2 = (arr2[0]*arr2[0] + arr2[1]*arr2[1]);
                return Integer.compare(distance2, distance1);
            }
        });
        for (int[] point : points){
            pq.offer(new int[]{point[0], point[1]});
            if (pq.size() > k){
                pq.poll();
            }
        }

        int len = pq.size();
        int[][] res = new int[len][2];
        int counter = 0;
        while (!pq.isEmpty()){
            res[counter++] = pq.poll();
        }

        return res;
    }
}
 */