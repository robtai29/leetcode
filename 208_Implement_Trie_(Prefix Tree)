/*************************************************************
2.16.25
https://leetcode.com/problems/implement-trie-prefix-tree/
**************************************************************/

class Trie {
    static class Node {
    public boolean isWord;
    public Node[] children;

    public Node(){
        isWord = false;
        children = new Node[26];
        }
    }

    private Node root;

    public Trie() {
        root = new Node();
    }
    
    public void insert(String word) {
        Node current = root;
        for (int i = 0; i < word.length(); i++){
            int index = word.charAt(i) - 'a';
            if (current.children[index] == null){
                current.children[index] = new Node();
            }
            current = current.children[index];
        }
            current.isWord = true;
    }
    
    public boolean search(String word) {
        Node node = searchHelper(word);
        return node != null && node.isWord == true;
    }
    
    public boolean startsWith(String prefix) {
        return searchHelper(prefix) != null;
    }

    private Node searchHelper(String key){
        Node current = root;
        for (int i = 0; i < key.length(); i++){
            int index = key.charAt(i) - 'a';
            if (current.children[index] == null){
                return null;
            }
            current = current.children[index];
        }
        return current;
    }
}

// 2.16.25
/*
class Trie {
    static class Node {
    public boolean isWord;
    public Map<Character, Node> children;

    public Node(){
        isWord = false;
        children = new HashMap<>();
        }
    }

    private Node root;

    public Trie() {
        root = new Node();
    }
    
    public void insert(String word) {
        Node current = root;
        for (int i = 0; i < word.length(); i++){
            char ch= word.charAt(i);
            if (current.children.get(ch) == null){
                current.children.put(ch, new Node());
            }
            current = current.children.get(ch);
        }
            current.isWord = true;
    }
    
    public boolean search(String word) {
        Node node = searchHelper(word);
        return node != null && node.isWord == true;
    }
    
    public boolean startsWith(String prefix) {
        return searchHelper(prefix) != null;
    }

    private Node searchHelper(String key){
        Node current = root;
        for (int i = 0; i < key.length(); i++){
            char ch = key.charAt(i);
            if (current.children.get(ch) == null){
                return null;
            }
            current = current.children.get(ch);
        }
        return current;
    }
}
 */