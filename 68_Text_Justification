/*************************************************************
1.30.25
https://leetcode.com/problems/text-justification/description/
**************************************************************/

class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> ans = new ArrayList<>();
        int begin = 0;
        while (begin < words.length){
            int end = findWordsForLine(begin, maxWidth, words);
            ans.add(justifyLine(begin, end, maxWidth, words));
            begin = end+1;
        }
        return ans;
    }

    private int findWordsForLine(int begin, int maxWidth, String[] words){
        int end = begin;
        int width = words[end].length();
        end++;
        while (end < words.length && width +1 + words[end].length() <= maxWidth){
            width += (1 + words[end++].length());
        }
        return end-1;
    }

    private String justifyLine(int begin, int end, int maxWidth, String[] words){
        boolean leftJustifiable = end == words.length-1 || begin == end;
        if (leftJustifiable){
            return leftJustify(words, begin, end, maxWidth);
        }
        StringBuilder sb = new StringBuilder();
        int whiteSpaces = maxWidth - wordsLength(begin, end, words);
        int gaps = end - begin;
        int spaceBetween = whiteSpaces / gaps;
        int remainder = whiteSpaces % gaps;

        int i = begin;
        for (; i < end; i++){
            sb.append(words[i]);
            sb.append(multiSpace(spaceBetween));
            if (remainder > 0){
                sb.append(" ");
                remainder--;
            }
        }
        sb.append(words[i]);
        return sb.toString();
    }

    private int wordsLength(int begin, int end, String[] words){
        int length = 0;
        for (int i = begin; i <= end; i++){
            length += words[i].length();
        }
        return length;
    }
    private String multiSpace(int length){
        return " ".repeat(length);
    }

    private String leftJustify(String[] words, int begin, int end, int maxWidth){
        StringBuilder sb = new StringBuilder();
        if (begin == end){
            sb.append(words[end]);
            String endSpaces = multiSpace(maxWidth - sb.length());
            sb.append(endSpaces);
            return sb.toString();
        }

        for (int i = begin; i <= end; i++){
            sb.append(words[i]);
            String spaces = i == end ? multiSpace(maxWidth-sb.length()) : " ";
            sb.append(spaces);
        }

        return sb.toString();
    }
}