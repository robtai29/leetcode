/*************************************************************
2.1.25
https://leetcode.com/problems/permutations-ii/
**************************************************************/

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(res, new ArrayList<>(), nums, new boolean[nums.length]);
        return res;
    }
    
    private void backtrack(List<List<Integer>> res, List<Integer> tempList, int[] nums, boolean[] used){
        if (tempList.size() == nums.length){
            res.add(new ArrayList(tempList));
            return;
        }
        
        for (int i = 0; i < nums.length; i++){
            //when a number has the same value with its previous, we can use this number only if the previous is used
           if (used[i] == true || (i > 0 && nums[i] == nums[i-1] && used[i-1] == true)){
                continue;
           }
            tempList.add(nums[i]);
            used[i] = true;
            backtrack(res, tempList, nums, used);
            tempList.remove(tempList.size() -1);
            used[i] = false;
        }
    }
}