/*************************************************************
8.12.22
https://leetcode.com/problems/design-add-and-search-words-data-structure/
**************************************************************/

class WordDictionary {

   private static class Node {
        private HashMap<Character, Node> children = new HashMap<>();
        private boolean isWord = false;
    }
    
    private Node root;

    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new Node();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        Node current = root;
        for (char ch : word.toCharArray()) {
            if (current.children.get(ch) == null) {
                current.children.put(ch, new Node());
            }
            current = current.children.get(ch);
        }
        current.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
      Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        int level = 0;
        
        while (!queue.isEmpty() && level <= word.length()){
            int size = queue.size();
            for (int i = 0; i < size; i++){
                Node current = queue.poll();
                if (level == word.length()){
                    if (current.isWord){
                        return true;
                    }else{
                        continue;
                    }
                    
                }
                
                char ch = word.charAt(level);
                
                if (ch== '.') {
                    for (Node t : current.children.values()) {
                            queue.offer(t);
                    }
                } else if (current.children.get(ch) != null) {
                    queue.offer(current.children.get(ch));
                }
            }
            level++;
        }
            return false;
        
        
    }
}

/*
class WordDictionary {

    private TrieNode root;

    public class TrieNode {
        public Map<Character, TrieNode> children = new HashMap<>();
        public boolean isWord;
    }
    
    public WordDictionary() {
        root = new TrieNode();
    }
    

    public void addWord(String word) {
       
        TrieNode current = root;

        for (char ch : word.toCharArray()) {
            if (current.children.get(ch) == null)
                current.children.put(ch, new TrieNode());

            current = current.children.get(ch);
        }

        current.isWord = true;
    }
    
    public boolean search(String word) {
        return search(word.toCharArray(), 0, root);
    }
    
    private boolean search(char[] chs, int k, TrieNode node) {
        if (k == chs.length){
            return node.isWord;
        }
        
        if (chs[k] != '.'){
            return node.children.get(chs[k]) != null && search(chs, k + 1, node.children.get(chs[k]));
        }else{
            for (TrieNode child : node.children.values()){
                if (search(chs, k + 1, child)){
                    return true;
                }
            }
            
        }
        return false;
    }
}
*/