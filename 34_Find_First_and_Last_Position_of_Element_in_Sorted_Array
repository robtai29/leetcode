/******************************************************************************************
1.21.25
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
******************************************************************************************/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0){
            return new int[]{-1, -1};
        }
        int lowerBound = lowerBound(nums, target);
        if (lowerBound == nums.length || nums[lowerBound] != target){
            return new int[]{-1, -1};
        }
        int upperBound = lowerBound(nums, target+1)-1;
        return new int[]{lowerBound, upperBound};
    }

    public int lowerBound(int[] nums, int target){
        if (target > nums[nums.length-1]){
            return nums.length;
        }

        int left = 0, right = nums.length-1;
        while (left < right){
            int mid = left + (right - left)/2;
            if (nums[mid] < target){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        return left;
    }
}

/*
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0){
            return new int[]{-1, -1};
        }
        int lowerBound = lowerBound(nums, target);
        if (lowerBound == nums.length || nums[lowerBound] != target){
            return new int[]{-1, -1};
        }

        int upperBound = upperBound(nums, target);

        return new int[]{lowerBound, upperBound};
    }

    public int lowerBound(int[] nums, int target){
        if (target > nums[nums.length-1]){
            return nums.length;
        }

        int left = 0, right = nums.length-1;
        while (left < right){
            int mid = left + (right - left)/2;
            if (nums[mid] < target){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        return left;
    }

    public int upperBound(int[] nums, int target){
        if (target > nums[nums.length-1]){
            return nums.length;
        }

        int left = 0, right = nums.length-1;
        while (left < right){
            int mid = left + (right - left+1)/2;
            if (nums[mid] > target){
               right = mid - 1;
            }else{
                left = mid;
            }
        }
        return left;
    }
}
 */